# -*- coding: utf-8 -*-
"""Olist.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WaT5vmZiW3fJQLj3baveWMZ0Sr6PGAbB

# üì¶ Sobre o Dataset ‚Äì Brazilian E-Commerce Public Dataset by Olist

Este conjunto de dados p√∫blicos cont√©m informa√ß√µes reais e anonimizadas de cerca de **100 mil pedidos realizados entre 2016 e 2018** em diversos marketplaces brasileiros, atrav√©s da **loja da Olist**. Ele oferece uma vis√£o completa da jornada de compra do cliente, permitindo an√°lises sob diversas perspectivas:

## üîç Informa√ß√µes dispon√≠veis
- **Status do pedido** (entregue, cancelado etc.)
- **Pre√ßos e formas de pagamento**
- **Frete e desempenho de entrega**
- **Localiza√ß√£o dos clientes**
- **Caracter√≠sticas dos produtos**
- **Avalia√ß√µes e coment√°rios dos consumidores**

Um **dataset de geolocaliza√ß√£o** tamb√©m est√° inclu√≠do, relacionando CEPs brasileiros com coordenadas (lat/lng).

> ‚ö†Ô∏è **Nota:** Um pedido pode conter v√°rios itens, e cada item pode ser enviado por um vendedor diferente. Todos os nomes reais de lojas e parceiros foram substitu√≠dos por **nomes de casas de Game of Thrones**, por quest√µes de anonimiza√ß√£o.

---

## üîó Integra√ß√£o com dados de Marketing

Existe um segundo dataset disponibilizado com dados do **funil de marketing da Olist**. √â poss√≠vel combin√°-los para an√°lises que v√£o desde a origem do cliente at√© o p√≥s-venda. Instru√ß√µes de jun√ß√£o est√£o dispon√≠veis em notebooks do Kaggle.

---

## üè¢ Sobre a Olist

A **Olist** √© a maior loja de departamentos dentro dos marketplaces brasileiros. Ela conecta pequenos lojistas a grandes canais de venda por meio de uma infraestrutura simplificada. Ap√≥s a compra, o vendedor √© notificado para enviar o produto. Depois da entrega (ou na data estimada), o cliente recebe uma pesquisa de satisfa√ß√£o.

---

## üí° Inspira√ß√µes para projetos com este dataset

Este dataset √© ideal para projetos de Ci√™ncia de Dados e Aprendizado de M√°quina:

- üß† **NLP**: An√°lise textual de avalia√ß√µes dos clientes.
- üîç **Clustering**: Explorar por que alguns clientes n√£o avaliam (satisfa√ß√£o impl√≠cita?).
- üìà **Previs√£o de vendas**: Usar datas de compra para prever demanda futura.
- üöö **Desempenho log√≠stico**: Estimar e otimizar prazos de entrega.
- üõí **Qualidade de produtos**: Descobrir quais categorias geram mais insatisfa√ß√£o.
- üîß **Engenharia de atributos**: Criar novas vari√°veis ou enriquecer os dados com fontes externas.

---

> üîó Site da Olist: [https://www.olist.com](https://www.olist.com)

## üóÇÔ∏è Esquema de Dados (Data Schema)

Abaixo est√° o diagrama de relacionamento entre as tabelas do conjunto de dados de e-commerce brasileiro da Olist. Este diagrama ajuda a visualizar como as diferentes tabelas est√£o conectadas, facilitando a compreens√£o das rela√ß√µes entre pedidos, clientes, produtos, pagamentos, avalia√ß√µes e geolocaliza√ß√£o.

![Diagrama de Relacionamento das Tabelas](https://i.imgur.com/HRhd2Y0.png)

## Pacotes
"""

import os
import zipfile
import gdown
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

"""## Download"""

!gdown 1pT4ecHmtztanoEJOyB9a0SkXa8F8DGsH

# Extrair os arquivos CSV
with zipfile.ZipFile("olist.zip", 'r') as zip_ref:
    zip_ref.extractall("olist_data")

# Listar arquivos extra√≠dos
files = sorted(os.listdir("olist_data"))
csv_files = [f for f in files if f.endswith(".csv")]
csv_files

"""## olist_orders_dataset

Cont√©m informa√ß√µes gerais sobre cada pedido realizado na Olist. Cada linha representa um pedido com dados sobre o cliente, status do pedido, datas de compra, aprova√ß√£o, envio e entrega.
"""

orders = pd.read_csv("olist_data/olist_orders_dataset.csv")
print("orders", orders.shape)

orders["order_purchase_timestamp"] = pd.to_datetime(orders["order_purchase_timestamp"])
orders["order_delivered_customer_date"] = pd.to_datetime(orders["order_delivered_customer_date"])
orders["order_estimated_delivery_date"] = pd.to_datetime(orders["order_estimated_delivery_date"])

orders

orders.info()

plt.figure(figsize=(8, 4))
sns.countplot(x="order_status", data=orders, order=orders["order_status"].value_counts().index)
plt.title("Distribui√ß√£o dos status dos pedidos")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

orders["order_purchase_timestamp"] = pd.to_datetime(orders["order_purchase_timestamp"])
orders["purchase_month"] = orders["order_purchase_timestamp"].dt.to_period("M").astype(str)
monthly_orders = orders.groupby("purchase_month").size()

plt.figure(figsize=(12, 4))
monthly_orders.plot()
plt.title("Quantidade de pedidos por m√™s")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""## olist_order_items_dataset

Cont√©m os itens que comp√µem cada pedido. Um pedido pode conter v√°rios produtos, e cada produto pode ser enviado por um vendedor diferente. Esta tabela relaciona produtos a pedidos.

"""

items = pd.read_csv("olist_data/olist_order_items_dataset.csv")
print("order_items", items.shape)

items

items.info()

plt.figure(figsize=(10, 6))
sns.scatterplot(data=items, x='price', y='freight_value')
plt.title('Price vs Freight Value')
plt.tight_layout()
plt.show()

"""## olist_order_payments_dataset

Informa√ß√µes sobre os pagamentos realizados em cada pedido, incluindo o tipo de pagamento (boleto, cart√£o, etc.), n√∫mero de parcelas e valor pago.

"""

payments = pd.read_csv("olist_data/olist_order_payments_dataset.csv")
print("payments", payments.shape)

payments

payments.info()

plt.figure(figsize=(10, 5))
sns.boxplot(data=payments, x="payment_type", y="payment_value")
plt.yscale('log')
plt.title("Valor dos pagamentos por tipo")
plt.tight_layout()
plt.show()

"""## olist_order_reviews_dataset

Avalia√ß√µes dos clientes para os pedidos. Inclui a nota (de 1 a 5), data da avalia√ß√£o e coment√°rios escritos, o que permite an√°lises de sentimentos e satisfa√ß√£o.

"""

reviews = pd.read_csv("olist_data/olist_order_reviews_dataset.csv")
print("reviews", reviews.shape)

reviews

reviews.info()

plt.figure(figsize=(8, 4))
sns.histplot(data=reviews, x="review_score", bins=5)
plt.title("Distribui√ß√£o das notas de avalia√ß√£o")
plt.tight_layout()
plt.show()

# Heatmap: atraso x review_score
orders_reviews = pd.merge(orders, reviews, on='order_id')
orders_reviews = orders_reviews.dropna(subset=['order_delivered_customer_date'])
orders_reviews["atraso_dias"] = (
    orders_reviews["order_delivered_customer_date"] - orders_reviews["order_estimated_delivery_date"]
).dt.days

bins = [-1, 0, 2, 5, 8, 12, 16, 21, 30, 60, 100, 150]
labels = ["0", "1-2", "3-5", "6-8", "9-12", "13-16", "17-21", "22-30", "31-60", "61-100", "101+"]

orders_reviews["faixa_atraso"] = pd.cut(orders_reviews["atraso_dias"], bins=bins, labels=labels)

pivot = pd.pivot_table(
    orders_reviews,
    values="order_id",
    index="review_score",
    columns="faixa_atraso",
    aggfunc="count",
    observed=False
)

plt.figure(figsize=(12, 5))
ax = sns.heatmap(pivot, cmap="YlOrRd", annot=True, fmt=".0f")
ax.invert_yaxis()
plt.title("Quantidade de pedidos por atraso e avalia√ß√£o (faixas detalhadas)")
plt.xlabel("Faixa de Atraso (dias)")
plt.ylabel("Nota de Avalia√ß√£o")
plt.tight_layout()
plt.show()

"""## olist_customers_dataset

Informa√ß√µes dos clientes, como ID √∫nico, cidade e estado de resid√™ncia. Esta tabela permite agrupar dados por regi√£o e realizar an√°lises geogr√°ficas.

"""

customers = pd.read_csv("olist_data/olist_customers_dataset.csv")
print("customers", customers.shape)

customers

customers.info()

top_states = customers['customer_state'].value_counts().head(10)
plt.figure(figsize=(8, 4))
sns.barplot(x=top_states.index, y=top_states.values)
plt.title("Top 10 estados com mais clientes")
plt.tight_layout()
plt.show()

"""## olist_products_dataset

Cont√©m informa√ß√µes detalhadas sobre os produtos, como nome da categoria, dimens√µes (peso, altura, largura, comprimento) e ID do produto.

"""

products = pd.read_csv("olist_data/olist_products_dataset.csv")
print("products", products.shape)

products

products.info()

top_categories = products['product_category_name'].value_counts().head(10)
plt.figure(figsize=(10, 4))
sns.barplot(x=top_categories.index, y=top_categories.values)
plt.title("Top 10 categorias de produtos")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

plt.figure(figsize=(8, 4))
sns.scatterplot(x="product_length_cm", y="product_weight_g", data=products.dropna())
plt.title("Peso vs. comprimento dos produtos")
plt.tight_layout()
plt.show()

# M√©dia de avalia√ß√£o por categoria de produto
merged = pd.merge(items, products, on="product_id")
merged = pd.merge(merged, reviews[['order_id', 'review_score']], on="order_id")
media_categoria = merged.groupby("product_category_name")["review_score"].mean().sort_values(ascending=False).head(10)

plt.figure(figsize=(10, 5))
sns.barplot(x=media_categoria.values, y=media_categoria.index)
plt.title("Top 10 Categorias com Melhor Avalia√ß√£o M√©dia")
plt.xlabel("M√©dia de Avalia√ß√£o")
plt.tight_layout()
plt.show()

orders["dias_entrega"] = (orders["order_delivered_customer_date"] - orders["order_purchase_timestamp"]).dt.days

merged_df = orders[["order_id", "dias_entrega"]].merge(payments, on="order_id")
merged_df = merged_df.merge(items, on="order_id")
merged_df = merged_df.merge(products, on="product_id")

# Selecionar apenas colunas num√©ricas
numeric_cols = [
    "dias_entrega", "payment_value", "payment_installments",
    "price", "freight_value",
    "product_weight_g", "product_length_cm", "product_height_cm", "product_width_cm"
]
corr_matrix = merged_df[numeric_cols].corr()

plt.figure(figsize=(10, 8))
sns.heatmap(corr_matrix, annot=True, cmap="Blues", fmt=".2f")
plt.title("Correla√ß√£o entre Vari√°veis Num√©ricas")
plt.tight_layout()
plt.show()

"""## olist_sellers_dataset

Informa√ß√µes sobre os vendedores, incluindo localiza√ß√£o (cidade e estado). Cada vendedor possui um ID √∫nico.

"""

sellers = pd.read_csv("olist_data/olist_sellers_dataset.csv")
print("sellers", sellers.shape)

sellers

sellers.info()

top_seller_states = sellers["seller_state"].value_counts().head(10)
plt.figure(figsize=(8, 4))
sns.barplot(x=top_seller_states.index, y=top_seller_states.values)
plt.title("Top 10 estados com mais vendedores")
plt.tight_layout()
plt.show()

"""## olist_geolocation_dataset

Rela√ß√£o entre CEPs brasileiros e coordenadas geogr√°ficas (latitude e longitude), permitindo an√°lise espacial e visualiza√ß√£o de distribui√ß√£o geogr√°fica.

"""

geo = pd.read_csv("olist_data/olist_geolocation_dataset.csv")
print("geolocation", geo.shape)

geo

geo.info()

plt.figure(figsize=(6, 6))
sns.scatterplot(x="geolocation_lng", y="geolocation_lat", data=geo, alpha=0.3)
plt.title("Geolocaliza√ß√µes")
plt.tight_layout()
plt.show()

plt.figure(figsize=(10, 8))
sns.scatterplot(
    data=geo,
    x="geolocation_lng",
    y="geolocation_lat",
    hue="geolocation_state",
    palette="tab20",
    alpha=0.5,
    legend="full"
)
plt.title("Geolocaliza√ß√£o (com estados)")
plt.xlabel("Longitude")
plt.ylabel("Latitude")
plt.legend(title="Estado (UF)", bbox_to_anchor=(1.05, 1), loc="upper left")
plt.tight_layout()
plt.show()

plt.figure(figsize=(10, 8))
sns.scatterplot(
    data=geo.sample(5000),
    x="geolocation_lng",
    y="geolocation_lat",
    hue="geolocation_state",
    palette="tab20",
    alpha=0.5,
    legend="full"
)
plt.title("Geolocaliza√ß√£o (com estados)")
plt.xlabel("Longitude")
plt.ylabel("Latitude")
plt.legend(title="Estado (UF)", bbox_to_anchor=(1.05, 1), loc="upper left")
plt.tight_layout()
plt.show()

"""## product_category_name_translation

Tabela de tradu√ß√£o dos nomes das categorias de produtos do portugu√™s para o ingl√™s. √ötil para visualiza√ß√µes e an√°lises com p√∫blicos internacionais.
"""

translations = pd.read_csv("olist_data/product_category_name_translation.csv")
print("translations", translations.shape)

translations

translations.info()